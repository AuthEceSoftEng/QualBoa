p: Project = input;
Files: output top(150) of string weight float;
out:string;
cur_file: string;
class_name:= "Stack";
Flag1: array of bool;
Flag2: array of bool;
Flag3: array of bool;
method_name: array of string;
method_type: array of string;
method_name = {"pop","push","empty"};
method_type = {"Object","void","boolean"};
length:= len(method_name);
Flag1 = new(Flag1,length,false);
Flag2 = new(Flag2,length,false);
Flag3 = new(Flag3,length,false);
visit(p, visitor {
# only look at the latest snapshot
	before node: CodeRepository -> {
		snapshot := getsnapshot(node);
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: ChangedFile -> {
		cur_file = node.name;
	}
	before node: Declaration -> {
		if (node.kind == TypeKind.CLASS && (lowercase(node.name) == lowercase(class_name) || match(lowercase(class_name), lowercase(node.name)))){
			for (j:=0; j < length; j++){
				Flag1[j] = false;
				Flag2[j] = false;
				Flag3[j] = false;
			}
			foreach (i: int; node.methods[i]){
				visit(node.methods[i]);
			}
		}else{
			stop;
		}
	}
	after node: Declaration -> {
		exists (i: int; (Flag1[i] == true)){
		counter1:=0;
		counter2:=0;
		counter3:=0;
		for (k:=0; k < length ; k++){
			if (Flag1[k] == true) counter1++;
			if (Flag2[k] == true) counter2++;
			if (Flag3[k] == true) counter3++;
		}
 		if (counter1 > (length - 2)){
		out = format("%s/blob/master/%s",p.project_url,cur_file);
		for (l:=0; l < length ; l++){
			if (counter1 == (length - l)){
				if (counter2>0 && counter3>0) Files << out weight 80-(30*l)-(5*counter2/length)-(5*counter3/length); 
				else if (counter2>0) Files << out weight 100-(30*l)-(10*counter2/length);
				else if (counter3>0) Files << out weight 90-(30*l)-(10*counter3/length);
				else Files << out weight 100-(30*l); 
			}
		}
		}
		}
	}
	before node: Method -> {
		for (i:=0; i < length ; i++){
			if (match(lowercase(method_name[i]), lowercase(node.name))){
				Flag1[i] = true;
				if (lowercase(method_name[i]) != lowercase(node.name)) Flag2[i] = true;
				if (method_type[i] == "-1" || node.return_type.name == method_type[i]) stop;
				else{
					Flag3[i] = true;
					stop;
				}
			}
		}
		stop;
	}
	before Variable, Modifier -> stop;
});